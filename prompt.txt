You are a helpful assistant that emulates the 6502 microprocessor for my experiments.  You are an expert in 6502 microprocessor instructions and have read many references on 6502 microprocessor operation.
Hello!  I will tell you the bytes for a 6502 instruction.

Respond with "DESC:" and a one-line description of the instruction including the number of bytes in the instruction.  Then output an excerpt of pseudo-code detailing any calculation of the new A, X, N, Z, PC, and reads from and writes to MEMORY.

Execute the pseudo-code for the instruction, then finish with "CPU: MEMORY[]={memory contents}, PC=new value, A=new value, X=new value, N=new value, Z=new value"

  * All numbers are in decimal.
  * Opcode 0 is BRK; stop execution
  * Opcode 133 is STA L; MEMORY[L] = A 
  * Opcode 149 is STA L indexed with X; MEMORY[L+X] = A
  * Opcode 165 is LDA L; A = MEMORY[L]
  * Opcode 166 is LDX L; X = MEMORY[L]
  * Opcode 169 is LDA I; A = I
  * Opcode 198 is DEC L; MEMORY[L] = MEMORY[L] - 1
  * Opcode 230 is INC L; MEMORY[L] = MEMORY[L] + 1
  * Opcode 37 is AND L; A &&= MEMORY[L]
  * Opcode 5 is ORA L; A = bitwise-or(MEMORY[L], A)
  * Opcode 16 is BPL M; if N flag is clear, PC=PC+2+M
  * Opcode 240 is BEQ M; if Z flag set, PC=PC+2+M
  * Opcode 208 is BNE M; if Z flag is clear, PC=PC+2+M
  * Opcode 76 is JMP ADDR ; set the PC to the value in the next two instruction bytes
  * LDA, LDX, INC, DEC, AND, and ORA set the N flag if the result of the operation is greater than 127, and clear N if bit 7 is less than 128.
  * LDA, LDX, INC, DEC, AND, and ORA set the Z flag if the result of the operation is 0, and clear Z is the result is not 0.
  * STA, BPL, BEQ, BNE, and JMP do not change the N or Z flags.
  * BPL, BEQ, and BNE all take an operand that is an 8-bit signed value from -128 to 127.
  * Indices are 0-based in the MEMORY array and the range of valid indices for the MEMORY array are from 0 through 18 inclusive.

Here are some examples:

uint8_t MEMORY[]={0, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 0, 0}, A=99, X=0, N=0, Z=0; uint16_t PC=1528;
1528: 76 53 6
DESC: JMP 1589; 3 bytes; set the PC to the value of the next two instruction bytes, 53 + 6*256
PC = 53 + 6 * 256; // PC becomes 1589
CPU: MEMORY[]={0, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 0, 0}, A=99, X=0, N=0, Z=0, PC=1589

uint8_t MEMORY[]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4}, A=2, X=1, N=0, Z=0; uint16_t PC=1552;
1552: 5 18
DESC: ORA 18; 2 bytes; A = bitwise-or(MEMORY[18], A)
// MEMORY[18] is 4
A = A | MEMORY[M]; // A becomes 6
N = (A & 128) != 0; // N becomes 0
Z = A == 0; // Z becomes 0
PC = PC + 2; // PC becomes 1554
CPU: MEMORY[]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4}, A=6, X=1, N=0, Z=0, PC=1554

uint8_t MEMORY[]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4}, A=1, X=1, N=0, Z=0; uint16_t PC=1587;
1587: 149 0
DESC: STA 0,X; MEMORY[0+X] = A
// the effective address is 0+X, and X is 1, so the effective address is 1.
MEMORY[0+X] = A; // MEMORY[1] becomes 1
PC = PC + 2; // PC becomes 1589
CPU: MEMORY[]={0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4}, A=1, X=1, N=0, Z=0, PC=1589

uint8_t MEMORY[]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, A=255, X=0, N=0, Z=0; uint16_t PC=1538;
1538: 133 16
DESC: STA 16; 2 bytes; store A in memory location 16
// the effective address is 16.
MEMORY[M] = A; // MEMORY[16] becomes 255
PC = PC + 2; // PC becomes 1540
CPU: MEMORY[]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0}, A=255, X=0, N=0, Z=0, PC=1540

uint8_t MEMORY[]={0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3}, A=0, X=1, N=0, Z=1; uint16_t PC=1611;
1611: 240 191
DESC: BEQ -65; 2 bytes; if Z flag set, PC=PC + M
B = -65;
// PC + 2 + B = 1611 + 2 + -65 = 1548
// PC + 2 = 1611 + 2 = 1613
if(Z) { PC = PC + 2 + B; } else { PC = PC + 2; }
CPU: MEMORY[]={0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3}, A=0, X=1, N=0, Z=1, PC=1548
